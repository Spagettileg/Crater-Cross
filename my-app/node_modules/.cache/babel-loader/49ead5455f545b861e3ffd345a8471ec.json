{"ast":null,"code":"import _slicedToArray from\"/home/ubuntu/environment/Crater-Cross/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/home/ubuntu/environment/Crater-Cross/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/ubuntu/environment/Crater-Cross/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/ubuntu/environment/Crater-Cross/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/ubuntu/environment/Crater-Cross/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import ReactDOM from'react-dom';import'./index.css';// Configure a square function component\nfunction Square(props){return/*#__PURE__*/React.createElement(\"button\",{className:\"square\",onClick:props.onClick},props.value);}// Create gaming board. Squares based on index scoring from 0 to 8\nvar Board=/*#__PURE__*/function(_React$Component){_inherits(Board,_React$Component);var _super=_createSuper(Board);// Constructor helps control the Squares by passing a prop to each Square\n// User options = X, O or null (blank)\nfunction Board(props){var _this;_classCallCheck(this,Board);_this=_super.call(this,props);_this.state={squares:Array(9).fill(null),xIsNext:true};return _this;}// Incidence of 'X' & 'O' and xIsNext boolean allows for player turns\n_createClass(Board,[{key:\"handleClick\",value:function handleClick(i){var squares=this.state.squares.slice();// function returns early if game won or Square already filled \nif(calculateWinner(squares)||squares[i]){return;}squares[i]=this.state.xIsNext?'X':'O';this.setState({squares:squares,xIsNext:!this.state.xIsNext});}// Returned element is split for readability. Parentheses added so JS\n// doesn't insert a semicolon after return and break the code.\n},{key:\"renderSquare\",value:function renderSquare(i){var _this2=this;return/*#__PURE__*/React.createElement(Square,{value:this.state.squares[i],onClick:function onClick(){return _this2.handleClick(i);}});}// Text produced to confirm the Crater-Cross champion\n},{key:\"render\",value:function render(){var winner=calculateWinner(this.state.squares);var status;if(winner){status='Champion: 3 in a row!!';}else{status='Next player: '+(this.state.xIsNext?'X':'O');}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"status\"},status),/*#__PURE__*/React.createElement(\"div\",{className:\"board-row\"},this.renderSquare(0),this.renderSquare(1),this.renderSquare(2)),/*#__PURE__*/React.createElement(\"div\",{className:\"board-row\"},this.renderSquare(3),this.renderSquare(4),this.renderSquare(5)),/*#__PURE__*/React.createElement(\"div\",{className:\"board-row\"},this.renderSquare(6),this.renderSquare(7),this.renderSquare(8)));}}]);return Board;}(React.Component);// Game status and user information\nvar Game=/*#__PURE__*/function(_React$Component2){_inherits(Game,_React$Component2);var _super2=_createSuper(Game);function Game(){_classCallCheck(this,Game);return _super2.apply(this,arguments);}_createClass(Game,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"game\"},/*#__PURE__*/React.createElement(\"div\",{className:\"game-board\"},/*#__PURE__*/React.createElement(Board,null)),/*#__PURE__*/React.createElement(\"div\",{className:\"game-info\"},/*#__PURE__*/React.createElement(\"div\",null),/*#__PURE__*/React.createElement(\"ol\",null)));}}]);return Game;}(React.Component);// ========================================\nReactDOM.render(/*#__PURE__*/React.createElement(Game,null),document.getElementById('root'));// Winning combinations built with use of index scoring\nfunction calculateWinner(squares){var lines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(var i=0;i<lines.length;i++){var _lines$i=_slicedToArray(lines[i],3),a=_lines$i[0],b=_lines$i[1],c=_lines$i[2];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){return squares[a];}}return null;}","map":{"version":3,"sources":["/home/ubuntu/environment/Crater-Cross/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","state","squares","Array","fill","xIsNext","i","slice","calculateWinner","setState","handleClick","winner","status","renderSquare","Component","Game","render","document","getElementById","lines","length","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Configure a square function component\n\nfunction Square(props) {\n    return (\n      <button\n        className=\"square\"\n        onClick={props.onClick}\n        >\n        {props.value}\n      </button>\n    );\n  }\n\n\n// Create gaming board. Squares based on index scoring from 0 to 8\n\nclass Board extends React.Component {\n  // Constructor helps control the Squares by passing a prop to each Square\n  // User options = X, O or null (blank)\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n    };\n  }\n  \n  // Incidence of 'X' & 'O' and xIsNext boolean allows for player turns\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    // function returns early if game won or Square already filled \n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n  \n  // Returned element is split for readability. Parentheses added so JS\n  // doesn't insert a semicolon after return and break the code.\n  renderSquare(i) {\n    return ( \n      <Square\n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n      />\n    );\n  }\n\n  // Text produced to confirm the Crater-Cross champion\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      status = 'Champion: 3 in a row!!';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\n// Game status and user information\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n// Winning combinations built with use of index scoring\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}