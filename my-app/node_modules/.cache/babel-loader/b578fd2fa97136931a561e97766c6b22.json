{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/environment/Crater-Cross/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Configure a square function component\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    \"game-id\": props.value,\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }, props.value);\n} // Create gaming board. Squares based on index scoring from 0 to 8\n\n\nclass Board extends React.Component {\n  // Returned element is split for readability. Parentheses added so JS\n  // doesn't insert a semicolon after return and break the code.\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    });\n  } // Text produced to confirm the Crater-Cross champion\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n} // Game status and user information\n\n\nclass Game extends React.Component {\n  // Incidence of 'X' & 'O' and xIsNext boolean allows for player turns\n  // Location of users sqaure selection captured as (col / row) array \n  handleClick(i) {\n    const locations = [[1, 1], [2, 1], [3, 1], [1, 2], [2, 2], [3, 2], [1, 3], [2, 3], [3, 3]];\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice(); // function returns early if game won or Square already filled \n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        location: locations[i]\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  sortHistory() {\n    this.setState({\n      isDescending: !this.state.isDescending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move + \" >> \" + history[move].location : 'Go to game start';\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: move,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      }, move === this.state.stepNumber ? /*#__PURE__*/React.createElement(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 45\n        }\n      }, desc) : desc));\n    }); // No null (blank) squares = draw outcome\n    // Null squares = Game has been won, as an outcome\n\n    let status;\n\n    if (winner) {\n      status = 'Winner: Player ' + winner;\n    } else if (!current.squares.includes(null)) {\n      status = 'Game Drawn';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"index.html\",\n      className: \"reset-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, \"Reset\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, status), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, this.state.isDescending ? moves : moves.reverse()), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sortHistory(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, \"Sort by: \", this.state.isDescending ? \"Descending\" : \"Ascending\"))));\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 3\n  }\n}), document.getElementById('root')); // Winning combinations built with use of index scoring\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/ubuntu/environment/Crater-Cross/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","value","onClick","Board","Component","renderSquare","i","squares","render","Game","handleClick","locations","history","state","slice","stepNumber","current","length","calculateWinner","xIsNext","setState","concat","location","jumpTo","step","sortHistory","isDescending","winner","moves","map","move","desc","status","includes","reverse","document","getElementById","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Configure a square function component\n\nfunction Square(props) {\n    return (\n      <button\n        className=\"square\"\n        game-id={props.value}\n        onClick={props.onClick}\n        >\n        {props.value}\n      </button>\n    );\n  }\n\n\n// Create gaming board. Squares based on index scoring from 0 to 8\n\nclass Board extends React.Component {\n  \n  // Returned element is split for readability. Parentheses added so JS\n  // doesn't insert a semicolon after return and break the code.\n  renderSquare(i) {\n    return ( \n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  // Text produced to confirm the Crater-Cross champion\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\n// Game status and user information\n\nclass Game extends React.Component {\n  \n  \n  // Incidence of 'X' & 'O' and xIsNext boolean allows for player turns\n  // Location of users sqaure selection captured as (col / row) array \n  handleClick(i) {\n    const locations = [\n      [1, 1],\n      [2, 1],\n      [3, 1],\n      [1, 2],\n      [2, 2],\n      [3, 2],\n      [1, 3],\n      [2, 3],\n      [3, 3],\n    ];\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    // function returns early if game won or Square already filled \n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        location: locations[i]\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n  \n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n  \n  sortHistory() {\n    this.setState({\n      isDescending: !this.state.isDescending\n    });\n  }\n  \n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    \n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move + \" >> \" + history[move].location :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>\n          {move === this.state.stepNumber ? <i>{desc}</i> : desc}\n          </button>\n        </li>\n        );\n    });\n    \n    // No null (blank) squares = draw outcome\n    // Null squares = Game has been won, as an outcome\n    let status;\n    if (winner) {\n      status = 'Winner: Player ' + winner;\n    } else if (!current.squares.includes(null)) {\n      status = 'Game Drawn';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    \n    return (\n      <div>\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n      </div>\n      <div className=\"reset\">\n        <a href=\"index.html\" className=\"reset-button\">Reset</a>\n      </div>\n      <div className=\"game\">\n        <div className=\"game-info\">\n            <div className=\"game-status\">{status}</div>\n            <ol>{this.state.isDescending ? moves : moves.reverse()}</ol>\n            <button onClick={() => this.sortHistory()}>\n              Sort by: {this.state.isDescending ? \"Descending\" : \"Ascending\"}\n            </button>\n          </div>\n      </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n// Winning combinations built with use of index scoring\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}