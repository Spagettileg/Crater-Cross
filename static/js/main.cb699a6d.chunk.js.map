{"version":3,"sources":["index.js"],"names":["Square","props","className","game-id","value","onClick","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","isDescending","slice","length","calculateWinner","setState","concat","location","step","status","current","winner","moves","map","move","desc","key","jumpTo","includes","handleClick","href","reverse","sortHistory","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb699a6d.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Configure a square function component\n\nfunction Square(props) {\n    return (\n      <button\n        className=\"square\"\n        game-id={props.value}\n        onClick={props.onClick}\n        >\n        {props.value}\n      </button>\n    );\n  }\n\n\n// Create gaming board. Squares based on index scoring from 0 to 8\n\nclass Board extends React.Component {\n  \n  // Returned element is split for readability. Parentheses added so JS\n  // doesn't insert a semicolon after return and break the code.\n  renderSquare(i) {\n    return ( \n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  // Text produced to confirm the Crater-Cross champion\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\n// Game status and user information\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      isDescending: true\n    };\n  }\n  \n  // Incidence of 'X' & 'O' and xIsNext boolean allows for player turns\n  // Location of users sqaure selection captured as (col / row) array \n  handleClick(i) {\n    const locations = [\n      [1, 1],\n      [2, 1],\n      [3, 1],\n      [1, 2],\n      [2, 2],\n      [3, 2],\n      [1, 3],\n      [2, 3],\n      [3, 3],\n    ];\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    // function returns early if game won or Square already filled \n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        location: locations[i]\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n  \n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n  \n  sortHistory() {\n    this.setState({\n      isDescending: !this.state.isDescending\n    });\n  }\n  \n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    \n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move + \" >> \" + history[move].location :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>\n          {move === this.state.stepNumber ? <i>{desc}</i> : desc}\n          </button>\n        </li>\n        );\n    });\n    \n    // No null (blank) squares = draw outcome\n    // Null squares = Game has been won, as an outcome\n    let status;\n    if (winner) {\n      status = 'Winner: Player ' + winner;\n    } else if (!current.squares.includes(null)) {\n      status = 'Game Drawn';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    \n    return (\n      <div>\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n      </div>\n      <div className=\"reset\">\n        <a href=\"index.html\" className=\"reset-button\">Reset</a>\n      </div>\n      <div className=\"game\">\n        <div className=\"game-info\">\n            <div className=\"game-status\">{status}</div>\n            <ol>{this.state.isDescending ? moves : moves.reverse()}</ol>\n            <button onClick={() => this.sortHistory()}>\n              Sort by: {this.state.isDescending ? \"Descending\" : \"Ascending\"}\n            </button>\n          </div>\n      </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n// Winning combinations built with use of index scoring\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}